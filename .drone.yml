---
kind: pipeline
name: default
type: kubernetes

services:
- name: docker
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:19.03.12-rc2

steps:
- name: Build
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:19.03.12-rc2
  commands:
  # Wait for the docker service to be up
  - echo "Checking for docker availability."
  - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
  - echo "echo docker now available."
  - docker build -t egar_ui-public-site:$${DRONE_COMMIT} .
  settings:
    group: build-stage
  when:
    event:
    - push
    - pull_request
    target:
      exclude:
      - production

#- name: Unit Tests and SonarQube Scanner
#  pull: if-not-exists
#  image: quay.io/ukhomeofficedigital/sonar-scanner-node:9fed2b90853321ac9a9c3da548a180f22c5dc4cb
#  commands:
#  - export NOTIFY_API_KEY=dummy
#  - cd src
#  - npm install
#  - npm run test-drone
#  - cd ..
#  - sonar-scanner -Dsonar.projectVersion=$${DRONE_BUILD_NUMBER}
#  settings:
#    group: build-stage
#  when:
#    event:
#    - push
#    - pull_request

- name: Push Image to Quay.io
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:19.03.12-rc2
  environment:
    DOCKER_PASSWORD:
      from_secret: DOCKER_PASSWORD
    DOCKER_USERNAME:
      from_secret: DOCKER_USERNAME
    DOCKER_REGISTRY_URL:
      from_secret: DOCKER_REGISTRY_URL
  commands:
  - docker login -u="$${DOCKER_USERNAME}" -p=$${DOCKER_PASSWORD} $${DOCKER_REGISTRY_URL}
  - docker tag egar_ui-public-site:$${DRONE_COMMIT} $${DOCKER_REGISTRY_URL}/ukhomeofficedigital/egar-public-site-ui:$${DRONE_COMMIT}
  - docker push quay.io/ukhomeofficedigital/egar-public-site-ui:$${DRONE_COMMIT}
  when:
    branch:
    - master
    - hotfix/*
    event:
    - push
    target:
      exclude:
      - production

- name: Deploy to SIT
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export TAGGED_VERSION=$${DRONE_COMMIT}
  - export KUBE_ARTIFACTORY_APP_SECRET=$${SIT_KUBE_ARTIFACTORY_APP_SECRET}
  - export KUBE_SERVER=$${SIT_KUBE_SERVER}
  - export KUBE_TOKEN=$${SIT_KUBE_TOKEN}
  - export BASE_URL=$${SIT_BASE_URL}
  - export BASE_URL_SERVICE=$${SIT_BASE_URL_SERVICE}
  - source common_lib
  - kd --timeout=6m --file kube/artifactory-secret.yml
  - kd --timeout=6m --file kube/public-site-network-policy.yml
  - kd --timeout=12m --file kube/public-site-deployment.yml
  - kd --timeout=6m --file kube/public-site-service.yml
  - kd --timeout=6m --file kube/public-site-ingress.yml
  environment:
    INGRESS_CLASS: nginx-internal
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: egar-sit
    NODE_ENV: sit
    SIT_BASE_URL:
      from_secret: SIT_BASE_URL
    SIT_BASE_URL_SERVICE:
      from_secret: SIT_BASE_URL_SERVICE
    SIT_KUBE_ARTIFACTORY_APP_SECRET:
      from_secret: SIT_KUBE_ARTIFACTORY_APP_SECRET
    SIT_KUBE_SERVER:
      from_secret: SIT_KUBE_SERVER
    SIT_KUBE_TOKEN:
      from_secret: SIT_KUBE_TOKEN
  when:
    branch:
    - master
    - hotfix/*
    event:
    - push
    target:
      exclude:
      - production

- name: Get_the_Dynamic_DB_creds
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export KUBE_SERVER=$${SIT_KUBE_SERVER}
  - export KUBE_TOKEN=$${SIT_KUBE_TOKEN}
  - echo "export E2E_FRONT_END_DB_USER=$(kd run get secret appdbcreds --template={{.data.FRONTENDDBUSER}} | base64 -d)" > db_creds
  - echo "export E2E_FRONT_END_DB_PASSWORD=$(kd run get secret appdbcreds --template={{.data.FRONTENDDBPASSWORD}} | base64 -d)" >> db_creds
  - echo "export E2E_BACK_END_DB_USER=$(kd run get secret appdbcreds --template={{.data.BACKENDDBUSER}} | base64 -d)" >> db_creds
  - echo "export E2E_BACK_END_DB_PASSWORD=$(kd run get secret appdbcreds --template={{.data.BACKENDDBPASSWORD}} | base64 -d)" >> db_creds
  environment:
    INGRESS_CLASS: nginx-internal
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: egar-sit
    NODE_ENV: sit
    SIT_KUBE_SERVER:
      from_secret: SIT_KUBE_SERVER
    SIT_KUBE_TOKEN:
      from_secret: SIT_KUBE_TOKEN
  when:
    branch:
    - master
    - hotfix/*
    event:
    - push
    target:
      exclude:
      - production

- name: End to End tests
  pull: if-not-exists
  image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:19.03.12-rc2
  commands:
  - source db_creds
  - "docker run --rm -t --name e2e-test_${DRONE_BUILD_NUMBER}  -e PROTOCOL=$${E2E_PROTOCOL} -e BASE_URL=$${E2E_BASE_URL} -e E2E_SMTP_SERVER=$${E2E_SMTP_SERVER} -e E2E_SMTP_PORT=$${E2E_SMTP_PORT} -e E2E_INDIVIDUAL_USER_USERNAME=$${E2E_INDIVIDUAL_USER_USERNAME} -e E2E_INDIVIDUAL_USER_PASSWORD=$${E2E_INDIVIDUAL_USER_PASSWORD} -e E2E_ORGANISATION_USER_USERNAME=$${E2E_ORGANISATION_USER_USERNAME} -e E2E_ORGANISATION_USER_PASSWORD=$${E2E_ORGANISATION_USER_PASSWORD} -e E2E_FRONT_END_DB_HOST=$${E2E_FRONT_END_DB_HOST} -e E2E_FRONT_END_DB_NAME=$${E2E_FRONT_END_DB_NAME} -e E2E_FRONT_END_DB_USER=$E2E_FRONT_END_DB_USER -e E2E_FRONT_END_DB_PASSWORD=$E2E_FRONT_END_DB_PASSWORD -e E2E_BACK_END_DB_HOST=$${E2E_BACK_END_DB_HOST} -e E2E_BACK_END_DB_NAME=$${E2E_BACK_END_DB_NAME} -e E2E_BACK_END_DB_USER=$E2E_BACK_END_DB_USER -e E2E_BACK_END_DB_PASSWORD=$E2E_BACK_END_DB_PASSWORD quay.io/ukhomeofficedigital/egar-e2e-test:latest\n"
  - rm db_creds
  environment:
    E2E_BACK_END_DB_HOST:
      from_secret: E2E_BACK_END_DB_HOST
    E2E_BACK_END_DB_NAME:
      from_secret: E2E_BACK_END_DB_NAME
    E2E_BASE_URL:
      from_secret: E2E_BASE_URL
    E2E_FRONT_END_DB_HOST:
      from_secret: E2E_FRONT_END_DB_HOST
    E2E_FRONT_END_DB_NAME:
      from_secret: E2E_FRONT_END_DB_NAME
    E2E_INDIVIDUAL_USER_PASSWORD:
      from_secret: E2E_INDIVIDUAL_USER_PASSWORD
    E2E_INDIVIDUAL_USER_USERNAME:
      from_secret: E2E_INDIVIDUAL_USER_USERNAME
    E2E_ORGANISATION_USER_PASSWORD:
      from_secret: E2E_ORGANISATION_USER_PASSWORD
    E2E_ORGANISATION_USER_USERNAME:
      from_secret: E2E_ORGANISATION_USER_USERNAME
    E2E_PROTOCOL:
      from_secret: E2E_PROTOCOL
    E2E_SMTP_PORT:
      from_secret: E2E_SMTP_PORT
    E2E_SMTP_SERVER:
      from_secret: E2E_SMTP_SERVER
  when:
    branch:
    - master
    - hotfix/*
    event:
    - push
    target:
      exclude:
      - production

- name: Deploy to Staging
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export TAGGED_VERSION=$${DRONE_COMMIT}
  - export DOCKER_REGISTRY_URL=$${DOCKER_REGISTRY_URL}
  - export KUBE_ARTIFACTORY_APP_SECRET=$${STAGING_KUBE_ARTIFACTORY_APP_SECRET}
  - export KUBE_SERVER=$${STAGING_KUBE_SERVER}
  - export KUBE_TOKEN=$${STAGING_KUBE_TOKEN}
  - export BASE_URL=$${STAGING_BASE_URL}
  - export BASE_URL_SERVICE=$${STAGING_BASE_URL_SERVICE}
  - source common_lib
  - kd --timeout=6m --file kube/artifactory-secret.yml
  - kd --timeout=6m --file kube/public-site-network-policy.yml
  - kd --timeout=6m --file kube/public-site-deployment.yml
  - kd --timeout=6m --file kube/public-site-service.yml
  - kd --timeout=6m --file kube/public-site-ingress.yml
  environment:
    DOCKER_REGISTRY_URL:
      from_secret: DOCKER_REGISTRY_URL
    INGRESS_CLASS: nginx-external
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: egar-staging
    NODE_ENV: staging
    STAGING_BASE_URL:
      from_secret: STAGING_BASE_URL
    STAGING_BASE_URL_SERVICE:
      from_secret: STAGING_BASE_URL_SERVICE
    STAGING_KUBE_ARTIFACTORY_APP_SECRET:
      from_secret: STAGING_KUBE_ARTIFACTORY_APP_SECRET
    STAGING_KUBE_SERVER:
      from_secret: STAGING_KUBE_SERVER
    STAGING_KUBE_TOKEN:
      from_secret: STAGING_KUBE_TOKEN
  when:
    branch:
    - master
    - hotfix/*
    event:
    - promote
    target:
      exclude:
      - production
      include:
      - staging

- name: Mock Performance Tests
  pull: if-not-exists
  image: docker:17.09.0-ce
  commands:
  - echo "TODO - Load/performance tests"
  when:
    branch:
    - master
    - hotfix/*
    event:
    - push
    target:
      exclude:
      - production
      include:
      - staging

- name: Deploy to Production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export TAGGED_VERSION=$${DRONE_COMMIT}
  - export DOCKER_REGISTRY_URL=$${DOCKER_REGISTRY_URL}
  - export KUBE_ARTIFACTORY_APP_SECRET=$${PRODUCTION_KUBE_ARTIFACTORY_APP_SECRET}
  - export KUBE_SERVER=$${PRODUCTION_KUBE_SERVER}
  - export KUBE_TOKEN=$${PRODUCTION_KUBE_TOKEN}
  - export BASE_URL=$${PRODUCTION_BASE_URL}
  - export BASE_URL_SERVICE=$${PRODUCTION_BASE_URL_SERVICE}
  - source common_lib
  - kd --timeout=6m --file kube/artifactory-secret.yml
  - kd --timeout=6m --file kube/public-site-network-policy.yml
  - kd --timeout=6m --file kube/public-site-deployment.yml
  - kd --timeout=6m --file kube/public-site-service.yml
  - kd --timeout=6m --file kube/public-site-ingress-for-service.gov.uk.yml
  environment:
    DOCKER_REGISTRY_URL:
      from_secret: DOCKER_REGISTRY_URL
    INGRESS_CLASS: nginx-external
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: egar-production
    NODE_ENV: production
    PRODUCTION_BASE_URL:
      from_secret: PRODUCTION_BASE_URL
    PRODUCTION_BASE_URL_SERVICE:
      from_secret: PRODUCTION_BASE_URL_SERVICE
    PRODUCTION_KUBE_ARTIFACTORY_APP_SECRET:
      from_secret: PRODUCTION_KUBE_ARTIFACTORY_APP_SECRET
    PRODUCTION_KUBE_SERVER:
      from_secret: PRODUCTION_KUBE_SERVER
    PRODUCTION_KUBE_TOKEN:
      from_secret: PRODUCTION_KUBE_TOKEN
  when:
    branch:
    - master
    - hotfix/*
    event:
    - promote
    target:
      include:
      - production

- name: Notify Slack on Failure
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: egar-notifications
    template: "*Deployment* {{repo.name}} FAILED*    Author: {{build.author}}    Duration: {{since job.started}}    Job: <{{build.link}}|#{{build.number}}>\n"
    username: Drone
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    status:
    - failure

trigger:
  branch:
    exclude:
    - wip*
    - WIP*

...
