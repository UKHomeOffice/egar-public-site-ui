---
kind: pipeline
name: Build Image
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: build_and_push
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:latest
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: DEV_EGAR_PUBLIC_SITE_UI_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DEV_EGAR_PUBLIC_SITE_UI_AWS_SECRET_ACCESS_KEY
      DOCKER_REGISTRY_URL: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
      REPO: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/egar/public-site-ui
    commands:
      - source ./ops/build_and_push.sh
    settings:
      group: build-stage

  - name: Unit Tests
    pull: if-not-exists
    image: node:18-alpine3.18
    commands:
    - export NOTIFY_API_KEY=dummy
    - cd src
    - npm install
    - npm run test-drone
    settings:
      group: build-stage
    when:
      event:
      - push
      - pull_request

  - name: scan-image
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    failure: ignore
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/egar/public-site-ui:${DRONE_COMMIT}
      IGNORE_UNFIXED: true
    when:
      event:
      - push
    depends_on:
    - build_and_push

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

volumes:
  - name: dockersock
    temp: {}

trigger:
      event:
        - push
---
kind: pipeline
name: Dev Deployment
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: Deploy to DEV
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - source ./ops/dev_deploy_vars.sh
      - source ./ops/deploy.sh
    environment:
      INGRESS_CLASS: nginx-internal
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-dev
      NODE_ENV: development
      DEV_BASE_URL:
        from_secret: DEV_BASE_URL
      DEV_KUBE_SERVER:
        from_secret: DEV_KUBE_SERVER
      DEV_KUBE_TOKEN:
        from_secret: DEV_KUBE_TOKEN
      DEV_URL_SERVICE:
        from_secret: DEV_URL_SERVICE
trigger:
  event:
    - tag
  ref:
    - refs/tags/release*

---
kind: pipeline
name: Test Deployment
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: Deploy to Test
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - source ./ops/test_deploy_vars.sh
      - source ./ops/deploy.sh
    environment:
      INGRESS_CLASS: nginx-internal
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-test
      NODE_ENV: testing
      TEST_BASE_URL:
        from_secret: TEST_BASE_URL
      TEST_KUBE_SERVER:
        from_secret: TEST_KUBE_SERVER
      TEST_KUBE_TOKEN:
        from_secret: TEST_KUBE_TOKEN
      # DEV_URL_SERVICE:
      #   from_secret: DEV_URL_SERVICE
trigger:
  event:
    - tag
  ref:
    - refs/tags/deploy-test*

---
kind: pipeline
name: SIT Deployment
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: Deploy to SIT
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - source ./ops/sit_deploy_vars.sh
      - source ./ops/deploy.sh
    environment:
      INGRESS_CLASS: nginx-internal
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-sit
      NODE_ENV: sit
      SIT_BASE_URL:
        from_secret: SIT_BASE_URL
      SIT_BASE_URL_SERVICE:
        from_secret: SIT_BASE_URL_SERVICE
      SIT_KUBE_SERVER:
        from_secret: SIT_KUBE_SERVER
      SIT_KUBE_TOKEN:
        from_secret: SIT_KUBE_TOKEN

  - name: Get_the_Dynamic_DB_creds
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - export KUBE_SERVER=$${SIT_KUBE_SERVER}
      - export KUBE_TOKEN=$${SIT_KUBE_TOKEN}
      - echo "export E2E_FRONT_END_DB_USER=$(kd run get secret appdbcreds --template={{.data.FRONTENDDBUSER}} | base64 -d)" > db_creds
      - echo "export E2E_FRONT_END_DB_PASSWORD=$(kd run get secret appdbcreds --template={{.data.FRONTENDDBPASSWORD}} | base64 -d)" >> db_creds
      - echo "export E2E_BACK_END_DB_USER=$(kd run get secret appdbcreds --template={{.data.BACKENDDBUSER}} | base64 -d)" >> db_creds
      - echo "export E2E_BACK_END_DB_PASSWORD=$(kd run get secret appdbcreds --template={{.data.BACKENDDBPASSWORD}} | base64 -d)" >> db_creds
    environment:
      INGRESS_CLASS: nginx-internal
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-sit
      NODE_ENV: sit
      SIT_KUBE_SERVER:
        from_secret: SIT_KUBE_SERVER
      SIT_KUBE_TOKEN:
        from_secret: SIT_KUBE_TOKEN

  - name: End to End tests
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:latest
    commands:
      - source db_creds
      - "docker run --rm -t --name e2e-test_${DRONE_BUILD_NUMBER}  -e PROTOCOL=$${E2E_PROTOCOL} -e BASE_URL=$${E2E_BASE_URL} -e E2E_SMTP_SERVER=$${E2E_SMTP_SERVER} -e E2E_SMTP_PORT=$${E2E_SMTP_PORT} -e E2E_INDIVIDUAL_USER_USERNAME=$${E2E_INDIVIDUAL_USER_USERNAME} -e E2E_INDIVIDUAL_USER_PASSWORD=$${E2E_INDIVIDUAL_USER_PASSWORD} -e E2E_ORGANISATION_USER_USERNAME=$${E2E_ORGANISATION_USER_USERNAME} -e E2E_ORGANISATION_USER_PASSWORD=$${E2E_ORGANISATION_USER_PASSWORD} -e E2E_FRONT_END_DB_HOST=$${E2E_FRONT_END_DB_HOST} -e E2E_FRONT_END_DB_NAME=$${E2E_FRONT_END_DB_NAME} -e E2E_FRONT_END_DB_USER=$E2E_FRONT_END_DB_USER -e E2E_FRONT_END_DB_PASSWORD=$E2E_FRONT_END_DB_PASSWORD -e E2E_BACK_END_DB_HOST=$${E2E_BACK_END_DB_HOST} -e E2E_BACK_END_DB_NAME=$${E2E_BACK_END_DB_NAME} -e E2E_BACK_END_DB_USER=$E2E_BACK_END_DB_USER -e E2E_BACK_END_DB_PASSWORD=$E2E_BACK_END_DB_PASSWORD quay.io/ukhomeofficedigital/egar-e2e-test:latest\n"
      - rm db_creds
    environment:
      E2E_BACK_END_DB_HOST:
        from_secret: E2E_BACK_END_DB_HOST
      E2E_BACK_END_DB_NAME:
        from_secret: E2E_BACK_END_DB_NAME
      E2E_BASE_URL:
        from_secret: E2E_BASE_URL
      E2E_FRONT_END_DB_HOST:
        from_secret: E2E_FRONT_END_DB_HOST
      E2E_FRONT_END_DB_NAME:
        from_secret: E2E_FRONT_END_DB_NAME
      E2E_INDIVIDUAL_USER_PASSWORD:
        from_secret: E2E_INDIVIDUAL_USER_PASSWORD
      E2E_INDIVIDUAL_USER_USERNAME:
        from_secret: E2E_INDIVIDUAL_USER_USERNAME
      E2E_ORGANISATION_USER_PASSWORD:
        from_secret: E2E_ORGANISATION_USER_PASSWORD
      E2E_ORGANISATION_USER_USERNAME:
        from_secret: E2E_ORGANISATION_USER_USERNAME
      E2E_PROTOCOL:
        from_secret: E2E_PROTOCOL
      E2E_SMTP_PORT:
        from_secret: E2E_SMTP_PORT
      E2E_SMTP_SERVER:
        from_secret: E2E_SMTP_SERVER

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
      


volumes:
  - name: dockersock
    temp: {}

trigger:
  branch:
    - master
    - hotfix/*
  event:
    - push
---

kind: pipeline
name: Staging Deployment
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: Deploy to Staging
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - source ./staging_deploy_vars.sh
      - source ./ops/deploy.sh
    environment:
      DOCKER_REGISTRY_URL:
        from_secret: DOCKER_REGISTRY_URL
      INGRESS_CLASS: nginx-external
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-staging
      NODE_ENV: staging
      STAGING_BASE_URL:
        from_secret: STAGING_BASE_URL
      STAGING_BASE_URL_SERVICE:
        from_secret: STAGING_BASE_URL_SERVICE
      STAGING_KUBE_SERVER:
        from_secret: STAGING_KUBE_SERVER
      STAGING_KUBE_TOKEN:
        from_secret: STAGING_KUBE_TOKEN
trigger:
  branch:
    - master
    - hotfix/*
  event:
    - promote
  target:
    exclude:
      - production
    include:
      - staging

---

kind: pipeline
name: Prod Deployment
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: Deploy to Production
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - source ./ops/prod_deploy_vars.sh
      - source ./ops/deploy.sh
    environment:
      DOCKER_REGISTRY_URL:
        from_secret: DOCKER_REGISTRY_URL
      INGRESS_CLASS: nginx-external
      INSECURE_SKIP_TLS_VERIFY: true
      KUBE_NAMESPACE: egar-production
      NODE_ENV: production
      PRODUCTION_BASE_URL_SERVICE:
        from_secret: PRODUCTION_BASE_URL_SERVICE
      PRODUCTION_KUBE_SERVER:
        from_secret: PRODUCTION_KUBE_SERVER
      PRODUCTION_KUBE_TOKEN:
        from_secret: PRODUCTION_KUBE_TOKEN

  - name: Notify Slack
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: sgar-dev
      webhook:
        from_secret: SLACK_WEBHOOK
      template: >
        {{#success build.status}}
          *Deployment* {{repo.name}} - *SUCCESS*
          Author: {{build.author}}
          Job: <{{build.link}}|#{{build.number}}>
          Duration: {{since job.started}}
          Message: {{build.message}}
        {{else}}
          *Deployment* {{repo.name}} - *FAILURE*
          Author: {{build.author}}
          Job: <{{build.link}}|#{{build.number}}>
          Duration: {{since job.started}}
          Message: {{build.message}}
        {{/success}}
    environment:
      SLACK_WEBHOOK:
        from_secret: SLACK_WEBHOOK
trigger:
  branch:
    - master
    - hotfix/*
  event:
    - promote
  target:
    include:
      - production

---
kind: pipeline
name: CRON Scanning
type: kubernetes

platform:
  os: linux
  arch: amd64

steps:
  - name: build_and_push_cron
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind:latest
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: DEV_EGAR_PUBLIC_SITE_UI_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY:
        from_secret: DEV_EGAR_PUBLIC_SITE_UI_AWS_SECRET_ACCESS_KEY
      DOCKER_REGISTRY_URL: 340268328991.dkr.ecr.eu-west-2.amazonaws.com
      REPO: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/egar/public-site-ui

    commands:
      - source ./ops/build_and_push.sh
    settings:
      group: build-stage

  - name: scan-image-cron
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/egar/public-site-ui:${DRONE_COMMIT}
      IGNORE_UNFIXED: true
    when:
      event:
      - cron
      depends_on: build_and_push_cron
      cron:
      - scheduled_vulnerability_scan

  - name: Notify Slack CRON
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: sgar-dev
      webhook:
        from_secret: SLACK_WEBHOOK
      template: >
        {{#success build.status}}
          *Image Security Scan* CRON Job has {{build.status}}
          Author: {{build.author}}
          Job: <{{build.link}}|#{{build.number}}>
          Duration: {{since job.started}}
          Message: {{build.message}}
        {{else}}
          *Image Security Scan* CRON Job has {{build.status}}
          *Deployment* {{repo.name}} - *FAILURE*
          Author: {{build.author}}
          Job: <{{build.link}}|#{{build.number}}>
          Duration: {{since job.started}}
          Message: {{build.message}}
          Event:
        {{/success}}
    environment:
      SLACK_WEBHOOK:
        from_secret: SLACK_WEBHOOK

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

volumes:
  - name: dockersock
    temp: {}

trigger:
  branch:
    - master
  event:
    - cron
  cron:
    - scheduled_vulnerability_scan