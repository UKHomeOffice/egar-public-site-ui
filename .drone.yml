pipeline:

  # Checkout specific tag for Testing:
  #   image: quay.io/ukhomeofficedigital/drone-docker
  #   commands:
  #     - echo $${DRONE_JOB_NUMBER}
  #     - echo $${DRONE_BUILD_NUMER}
  #     - echo $${DRONE_COMMIT}
  #     - echo $${DRONE_COMMIT_REF}
  #     - echo $${DRONE_COMMIT_SHA}
  #     - git checkout $${{DRONE_JOB_NUMBER}}
  #   when:
  #     event: deployment
  #     branch: [ master, hotfix/* ]
  #     environment: testing

  # Checkout specific tag for Production:
  #   image: quay.io/ukhomeofficedigital/drone-docker
  #   commands:
  #     - git checkout $${{DRONE_JOB_NUMBER}}
  #   when:
  #     event: deployment
  #     branch: [ master, hotfix/* ]
  #     environment: production

  Build:
    image: quay.io/ukhomeofficedigital/drone-docker
    commands:
      - docker build -t egar_ui-public-site:$${DRONE_BUILD_NUMBER} .
    when:
      event: [ push, pull_request ]
      environment:
        exclude: [ production ]


  Unit tests:
    image: quay.io/ukhomeofficedigital/drone-docker
    commands:
      - docker run -t -e NOTIFY_API_KEY=dummy egar_ui-public-site:$${DRONE_BUILD_NUMBER} sh -c "cd test/ && npm test"
    when:
      event: [ push, pull_request ]
      environment:
        exclude: [ production ]


  SonarQube Scanner:
    image: quay.io/ukhomeofficedigital/sonar-scanner-node:latest
    commands:
      - export NOTIFY_API_KEY=dummy
      - cd src
      - npm install
      - npm run test-drone
      - cd ..
      - sonar-scanner -Dsonar.projectVersion=$${DRONE_BUILD_NUMBER}
    when:
      event: [ push, pull_request ]


  Push Image to Quay.io:
    image: quay.io/ukhomeofficedigital/drone-docker
    secrets:
      - DOCKER_USERNAME
      - DOCKER_PASSWORD
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/egar-public-site-ui
    tags:
      # - ${DRONE_BUILD_NUMBER}
      - ${DRONE_COMMIT}
    when:
      branch: [ master, hotfix/* ]
      event: [ push ]
      environment:
        exclude: [ production ]


  Deploy to SIT:
    image: quay.io/ukhomeofficedigital/kd
    environment:
      - NODE_ENV=sit
      - INSECURE_SKIP_TLS_VERIFY=true
      - KUBE_NAMESPACE=egar-sit
      - INGRESS_CLASS=nginx-internal
    secrets:
      - SIT_KUBE_ARTIFACTORY_APP_SECRET
      - SIT_KUBE_SERVER
      - SIT_KUBE_TOKEN
      - SIT_BASE_URL
      - SIT_BASE_URL_SERVICE
    commands:
      - export TAGGED_VERSION=$${DRONE_COMMIT}
      - export KUBE_ARTIFACTORY_APP_SECRET=$${SIT_KUBE_ARTIFACTORY_APP_SECRET}
      - export KUBE_SERVER=$${SIT_KUBE_SERVER}
      - export KUBE_TOKEN=$${SIT_KUBE_TOKEN}
      - export BASE_URL=$${SIT_BASE_URL}
      - export BASE_URL_SERVICE=$${SIT_BASE_URL_SERVICE}
      - kd --timeout=6m --file kube/artifactory-secret.yml
      - kd --timeout=6m --file kube/public-site-network-policy.yml
      - kd --timeout=6m --file kube/public-site-deployment.yml
      - kd --timeout=6m --file kube/public-site-service.yml
      - kd --timeout=6m --file kube/public-site-ingress.yml
    when:
      branch: [ master, hotfix/* ]
      event: push
      environment:
        exclude: [ production ]


  End to End tests:
    image: quay.io/ukhomeofficedigital/drone-docker
    secrets:
      - E2E_PROTOCOL
      - E2E_BASE_URL
      - E2E_SMTP_SERVER
      - E2E_SMTP_PORT
      - E2E_INDIVIDUAL_USER_USERNAME
      - E2E_INDIVIDUAL_USER_PASSWORD
    commands:
      - docker run --rm -t --name e2e-test_${DRONE_BUILD_NUMBER} -e PROTOCOL=$${E2E_PROTOCOL} -e BASE_URL=$${E2E_BASE_URL} -e E2E_SMTP_SERVER=$${E2E_SMTP_SERVER} -e E2E_SMTP_PORT=$${E2E_SMTP_PORT} -e E2E_INDIVIDUAL_USER_USERNAME=$${E2E_INDIVIDUAL_USER_USERNAME} -e E2E_INDIVIDUAL_USER_PASSWORD=$${E2E_INDIVIDUAL_USER_PASSWORD} quay.io/ukhomeofficedigital/egar-e2e-test:latest
    when:
      branch: [ master, hotfix/* ]
      event: push
      environment:
        exclude: [ production ]


  Deploy to Staging:
    image: quay.io/ukhomeofficedigital/kd
    environment:
      - NODE_ENV=staging
      - INSECURE_SKIP_TLS_VERIFY=true
      - KUBE_NAMESPACE=egar-staging
      - INGRESS_CLASS=nginx-external
    secrets:
      - DOCKER_REGISTRY_URL
      - STAGING_KUBE_ARTIFACTORY_APP_SECRET
      - STAGING_KUBE_SERVER
      - STAGING_KUBE_TOKEN
      - STAGING_BASE_URL
      - STAGING_BASE_URL_SERVICE
    commands:
      - export TAGGED_VERSION=$${DRONE_COMMIT}
      - export DOCKER_REGISTRY_URL=$${DOCKER_REGISTRY_URL}
      - export KUBE_ARTIFACTORY_APP_SECRET=$${STAGING_KUBE_ARTIFACTORY_APP_SECRET}
      - export KUBE_SERVER=$${STAGING_KUBE_SERVER}
      - export KUBE_TOKEN=$${STAGING_KUBE_TOKEN}
      - export BASE_URL=$${STAGING_BASE_URL}
      - export BASE_URL_SERVICE=$${STAGING_BASE_URL_SERVICE}
      - kd --timeout=6m --file kube/artifactory-secret.yml
      - kd --timeout=6m --file kube/public-site-network-policy.yml
      - kd --timeout=6m --file kube/public-site-deployment.yml
      - kd --timeout=6m --file kube/public-site-service.yml
      - kd --timeout=6m --file kube/public-site-ingress.yml
    when:
      branch: [ master, hotfix/* ]
      event: push
      environment:
        exclude: [ production ]


  Mock Performance Tests:
    image: docker:17.09.0-ce
    commands:
      - echo "TODO - Load/performance tests"
    when:
      branch: [ master, hotfix/* ]
      event: push
      environment:
        exclude: [ production ]

  # Tag successful Staging deployment:
  #   image: quay.io/ukhomeofficedigital/drone-docker
  #   commands:
  #     - echo "Tagging as $${DRONE_BUILD_NUMBER}"
  #     - git tag $${DRONE_BUILD_NUMBER}
  #     - git push origin $${DRONE_BUILD_NUMBER}
  #   when:
  #     branch: [ master, hotfix/* ]
  #     event: push
  #     environment:
  #       exclude: [ production ]


  Deploy to Production:
    image: quay.io/ukhomeofficedigital/kd
    environment:
      - NODE_ENV=production
      - INSECURE_SKIP_TLS_VERIFY=true
      - KUBE_NAMESPACE=egar-production
      - INGRESS_CLASS=nginx-external
    secrets:
      - DOCKER_REGISTRY_URL
      - PRODUCTION_KUBE_ARTIFACTORY_APP_SECRET
      - PRODUCTION_KUBE_SERVER
      - PRODUCTION_KUBE_TOKEN
      - PRODUCTION_BASE_URL
      - PRODUCTION_BASE_URL_SERVICE
    commands:
      - export TAGGED_VERSION=$${DRONE_COMMIT}
      - export DOCKER_REGISTRY_URL=$${DOCKER_REGISTRY_URL}
      - export KUBE_ARTIFACTORY_APP_SECRET=$${PRODUCTION_KUBE_ARTIFACTORY_APP_SECRET}
      - export KUBE_SERVER=$${PRODUCTION_KUBE_SERVER}
      - export KUBE_TOKEN=$${PRODUCTION_KUBE_TOKEN}
      - export BASE_URL=$${PRODUCTION_BASE_URL}
      - export BASE_URL_SERVICE=$${PRODUCTION_BASE_URL_SERVICE}
      - kd --timeout=6m --file kube/artifactory-secret.yml
      - kd --timeout=6m --file kube/public-site-network-policy.yml
      - kd --timeout=6m --file kube/public-site-deployment.yml
      - kd --timeout=6m --file kube/public-site-service.yml
      - kd --timeout=6m --file kube/public-site-ingress-for-service.gov.uk.yml
    when:
      event: deployment
      branch: [ master, hotfix/* ]
      environment: production


  Notify Slack on Failure:
    image: plugins/slack
    secrets:
      - SLACK_WEBHOOK
    channel: egar-notifications
    username: Drone
    template: >
      *Deployment* {{repo.name}} FAILED*    Author: {{build.author}}    Duration: {{since job.started}}    Job: <{{build.link}}|#{{build.number}}>
    when:
      status: failure


branches:
  exclude: [ wip*, WIP* ]
